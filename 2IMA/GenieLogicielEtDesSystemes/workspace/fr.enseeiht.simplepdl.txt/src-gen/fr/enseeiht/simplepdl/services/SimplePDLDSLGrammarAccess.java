/*
 * generated by Xtext 2.10.0
 */
package fr.enseeiht.simplepdl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimplePDLDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.simplepdl.SimplePDLDSL.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessElementsProcessElementParserRuleCall_3_0 = (RuleCall)cProcessElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Process pdl::Process:
		//	'process' name=ID '{'
		//	processElements+=ProcessElement*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'process' name=ID '{' processElements+=ProcessElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//processElements+=ProcessElement*
		public Assignment getProcessElementsAssignment_3() { return cProcessElementsAssignment_3; }
		
		//ProcessElement
		public RuleCall getProcessElementsProcessElementParserRuleCall_3_0() { return cProcessElementsProcessElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProcessElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.simplepdl.SimplePDLDSL.ProcessElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWorkDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWorkSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGuidanceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRessourceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRessourceSequenceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ProcessElement pdl::ProcessElement:
		//	WorkDefinition
		//	| WorkSequence
		//	| Guidance
		//	| Ressource
		//	| RessourceSequence
		@Override public ParserRule getRule() { return rule; }
		
		//WorkDefinition | WorkSequence | Guidance | Ressource | RessourceSequence
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WorkDefinition
		public RuleCall getWorkDefinitionParserRuleCall_0() { return cWorkDefinitionParserRuleCall_0; }
		
		//WorkSequence
		public RuleCall getWorkSequenceParserRuleCall_1() { return cWorkSequenceParserRuleCall_1; }
		
		//Guidance
		public RuleCall getGuidanceParserRuleCall_2() { return cGuidanceParserRuleCall_2; }
		
		//Ressource
		public RuleCall getRessourceParserRuleCall_3() { return cRessourceParserRuleCall_3; }
		
		//RessourceSequence
		public RuleCall getRessourceSequenceParserRuleCall_4() { return cRessourceSequenceParserRuleCall_4; }
	}
	public class WorkDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.simplepdl.SimplePDLDSL.WorkDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//WorkDefinition pdl::WorkDefinition:
		//	'wd' name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//'wd' name=ID
		public Group getGroup() { return cGroup; }
		
		//'wd'
		public Keyword getWdKeyword_0() { return cWdKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class WorkSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.simplepdl.SimplePDLDSL.WorkSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkTypeWorkSequenceTypeEnumRuleCall_1_0 = (RuleCall)cLinkTypeAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredecessorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPredecessorWorkDefinitionCrossReference_3_0 = (CrossReference)cPredecessorAssignment_3.eContents().get(0);
		private final RuleCall cPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cPredecessorWorkDefinitionCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSuccessorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSuccessorWorkDefinitionCrossReference_5_0 = (CrossReference)cSuccessorAssignment_5.eContents().get(0);
		private final RuleCall cSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1 = (RuleCall)cSuccessorWorkDefinitionCrossReference_5_0.eContents().get(1);
		
		//WorkSequence pdl::WorkSequence:
		//	'ws' linkType=WorkSequenceType
		//	'from' predecessor=[pdl::WorkDefinition]
		//	'to' successor=[pdl::WorkDefinition]
		@Override public ParserRule getRule() { return rule; }
		
		//'ws' linkType=WorkSequenceType 'from' predecessor=[pdl::WorkDefinition] 'to' successor=[pdl::WorkDefinition]
		public Group getGroup() { return cGroup; }
		
		//'ws'
		public Keyword getWsKeyword_0() { return cWsKeyword_0; }
		
		//linkType=WorkSequenceType
		public Assignment getLinkTypeAssignment_1() { return cLinkTypeAssignment_1; }
		
		//WorkSequenceType
		public RuleCall getLinkTypeWorkSequenceTypeEnumRuleCall_1_0() { return cLinkTypeWorkSequenceTypeEnumRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//predecessor=[pdl::WorkDefinition]
		public Assignment getPredecessorAssignment_3() { return cPredecessorAssignment_3; }
		
		//[pdl::WorkDefinition]
		public CrossReference getPredecessorWorkDefinitionCrossReference_3_0() { return cPredecessorWorkDefinitionCrossReference_3_0; }
		
		//ID
		public RuleCall getPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1() { return cPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//successor=[pdl::WorkDefinition]
		public Assignment getSuccessorAssignment_5() { return cSuccessorAssignment_5; }
		
		//[pdl::WorkDefinition]
		public CrossReference getSuccessorWorkDefinitionCrossReference_5_0() { return cSuccessorWorkDefinitionCrossReference_5_0; }
		
		//ID
		public RuleCall getSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1() { return cSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1; }
	}
	public class GuidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.simplepdl.SimplePDLDSL.Guidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cElementWorkDefinitionCrossReference_3_0 = (CrossReference)cElementAssignment_3.eContents().get(0);
		private final RuleCall cElementWorkDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cElementWorkDefinitionCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSpaceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElementAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cElementWorkDefinitionCrossReference_4_1_0 = (CrossReference)cElementAssignment_4_1.eContents().get(0);
		private final RuleCall cElementWorkDefinitionIDTerminalRuleCall_4_1_0_1 = (RuleCall)cElementWorkDefinitionCrossReference_4_1_0.eContents().get(1);
		
		//Guidance pdl::Guidance:
		//	'gd' text=STRING
		//	'to' element+=[pdl::WorkDefinition] (' ' element+=[pdl::WorkDefinition])*
		@Override public ParserRule getRule() { return rule; }
		
		//'gd' text=STRING 'to' element+=[pdl::WorkDefinition] (' ' element+=[pdl::WorkDefinition])*
		public Group getGroup() { return cGroup; }
		
		//'gd'
		public Keyword getGdKeyword_0() { return cGdKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//element+=[pdl::WorkDefinition]
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//[pdl::WorkDefinition]
		public CrossReference getElementWorkDefinitionCrossReference_3_0() { return cElementWorkDefinitionCrossReference_3_0; }
		
		//ID
		public RuleCall getElementWorkDefinitionIDTerminalRuleCall_3_0_1() { return cElementWorkDefinitionIDTerminalRuleCall_3_0_1; }
		
		//(' ' element+=[pdl::WorkDefinition])*
		public Group getGroup_4() { return cGroup_4; }
		
		//' '
		public Keyword getSpaceKeyword_4_0() { return cSpaceKeyword_4_0; }
		
		//element+=[pdl::WorkDefinition]
		public Assignment getElementAssignment_4_1() { return cElementAssignment_4_1; }
		
		//[pdl::WorkDefinition]
		public CrossReference getElementWorkDefinitionCrossReference_4_1_0() { return cElementWorkDefinitionCrossReference_4_1_0; }
		
		//ID
		public RuleCall getElementWorkDefinitionIDTerminalRuleCall_4_1_0_1() { return cElementWorkDefinitionIDTerminalRuleCall_4_1_0_1; }
	}
	public class RessourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.simplepdl.SimplePDLDSL.Ressource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cQuantityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuantityINTTerminalRuleCall_2_0 = (RuleCall)cQuantityAssignment_2.eContents().get(0);
		
		//Ressource pdl::Ressource:
		//	're' name=ID quantity=INT
		@Override public ParserRule getRule() { return rule; }
		
		//'re' name=ID quantity=INT
		public Group getGroup() { return cGroup; }
		
		//'re'
		public Keyword getReKeyword_0() { return cReKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//quantity=INT
		public Assignment getQuantityAssignment_2() { return cQuantityAssignment_2; }
		
		//INT
		public RuleCall getQuantityINTTerminalRuleCall_2_0() { return cQuantityINTTerminalRuleCall_2_0; }
	}
	public class RessourceSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.simplepdl.SimplePDLDSL.RessourceSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWorkdefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cWorkdefinitionWorkDefinitionCrossReference_1_0 = (CrossReference)cWorkdefinitionAssignment_1.eContents().get(0);
		private final RuleCall cWorkdefinitionWorkDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cWorkdefinitionWorkDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cNeedsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuantityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuantityINTTerminalRuleCall_3_0 = (RuleCall)cQuantityAssignment_3.eContents().get(0);
		private final Assignment cRessourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRessourceRessourceCrossReference_4_0 = (CrossReference)cRessourceAssignment_4.eContents().get(0);
		private final RuleCall cRessourceRessourceIDTerminalRuleCall_4_0_1 = (RuleCall)cRessourceRessourceCrossReference_4_0.eContents().get(1);
		
		//RessourceSequence pdl::RessourceSequence:
		//	'rs' workdefinition=[pdl::WorkDefinition]
		//	'needs' quantity=INT ressource=[pdl::Ressource]
		@Override public ParserRule getRule() { return rule; }
		
		//'rs' workdefinition=[pdl::WorkDefinition] 'needs' quantity=INT ressource=[pdl::Ressource]
		public Group getGroup() { return cGroup; }
		
		//'rs'
		public Keyword getRsKeyword_0() { return cRsKeyword_0; }
		
		//workdefinition=[pdl::WorkDefinition]
		public Assignment getWorkdefinitionAssignment_1() { return cWorkdefinitionAssignment_1; }
		
		//[pdl::WorkDefinition]
		public CrossReference getWorkdefinitionWorkDefinitionCrossReference_1_0() { return cWorkdefinitionWorkDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getWorkdefinitionWorkDefinitionIDTerminalRuleCall_1_0_1() { return cWorkdefinitionWorkDefinitionIDTerminalRuleCall_1_0_1; }
		
		//'needs'
		public Keyword getNeedsKeyword_2() { return cNeedsKeyword_2; }
		
		//quantity=INT
		public Assignment getQuantityAssignment_3() { return cQuantityAssignment_3; }
		
		//INT
		public RuleCall getQuantityINTTerminalRuleCall_3_0() { return cQuantityINTTerminalRuleCall_3_0; }
		
		//ressource=[pdl::Ressource]
		public Assignment getRessourceAssignment_4() { return cRessourceAssignment_4; }
		
		//[pdl::Ressource]
		public CrossReference getRessourceRessourceCrossReference_4_0() { return cRessourceRessourceCrossReference_4_0; }
		
		//ID
		public RuleCall getRessourceRessourceIDTerminalRuleCall_4_0_1() { return cRessourceRessourceIDTerminalRuleCall_4_0_1; }
	}
	
	public class WorkSequenceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.simplepdl.SimplePDLDSL.WorkSequenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStartToStartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStartToStartS2sKeyword_0_0 = (Keyword)cStartToStartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToStartEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFinishToStartF2sKeyword_1_0 = (Keyword)cFinishToStartEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStartToFinishEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStartToFinishS2fKeyword_2_0 = (Keyword)cStartToFinishEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToFinishEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFinishToFinishF2fKeyword_3_0 = (Keyword)cFinishToFinishEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum WorkSequenceType returns pdl::WorkSequenceType:
		//	startToStart='s2s'
		//	| finishToStart='f2s'
		//	| startToFinish='s2f'
		//	| finishToFinish='f2f';
		public EnumRule getRule() { return rule; }
		
		//startToStart='s2s' | finishToStart='f2s' | startToFinish='s2f' | finishToFinish='f2f'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//startToStart='s2s'
		public EnumLiteralDeclaration getStartToStartEnumLiteralDeclaration_0() { return cStartToStartEnumLiteralDeclaration_0; }
		
		//'s2s'
		public Keyword getStartToStartS2sKeyword_0_0() { return cStartToStartS2sKeyword_0_0; }
		
		//finishToStart='f2s'
		public EnumLiteralDeclaration getFinishToStartEnumLiteralDeclaration_1() { return cFinishToStartEnumLiteralDeclaration_1; }
		
		//'f2s'
		public Keyword getFinishToStartF2sKeyword_1_0() { return cFinishToStartF2sKeyword_1_0; }
		
		//startToFinish='s2f'
		public EnumLiteralDeclaration getStartToFinishEnumLiteralDeclaration_2() { return cStartToFinishEnumLiteralDeclaration_2; }
		
		//'s2f'
		public Keyword getStartToFinishS2fKeyword_2_0() { return cStartToFinishS2fKeyword_2_0; }
		
		//finishToFinish='f2f'
		public EnumLiteralDeclaration getFinishToFinishEnumLiteralDeclaration_3() { return cFinishToFinishEnumLiteralDeclaration_3; }
		
		//'f2f'
		public Keyword getFinishToFinishF2fKeyword_3_0() { return cFinishToFinishF2fKeyword_3_0; }
	}
	
	private final ProcessElements pProcess;
	private final ProcessElementElements pProcessElement;
	private final WorkDefinitionElements pWorkDefinition;
	private final WorkSequenceElements pWorkSequence;
	private final GuidanceElements pGuidance;
	private final RessourceElements pRessource;
	private final RessourceSequenceElements pRessourceSequence;
	private final WorkSequenceTypeElements eWorkSequenceType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimplePDLDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProcess = new ProcessElements();
		this.pProcessElement = new ProcessElementElements();
		this.pWorkDefinition = new WorkDefinitionElements();
		this.pWorkSequence = new WorkSequenceElements();
		this.pGuidance = new GuidanceElements();
		this.pRessource = new RessourceElements();
		this.pRessourceSequence = new RessourceSequenceElements();
		this.eWorkSequenceType = new WorkSequenceTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.enseeiht.simplepdl.SimplePDLDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Process pdl::Process:
	//	'process' name=ID '{'
	//	processElements+=ProcessElement*
	//	'}'
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//ProcessElement pdl::ProcessElement:
	//	WorkDefinition
	//	| WorkSequence
	//	| Guidance
	//	| Ressource
	//	| RessourceSequence
	public ProcessElementElements getProcessElementAccess() {
		return pProcessElement;
	}
	
	public ParserRule getProcessElementRule() {
		return getProcessElementAccess().getRule();
	}
	
	//WorkDefinition pdl::WorkDefinition:
	//	'wd' name=ID
	public WorkDefinitionElements getWorkDefinitionAccess() {
		return pWorkDefinition;
	}
	
	public ParserRule getWorkDefinitionRule() {
		return getWorkDefinitionAccess().getRule();
	}
	
	//WorkSequence pdl::WorkSequence:
	//	'ws' linkType=WorkSequenceType
	//	'from' predecessor=[pdl::WorkDefinition]
	//	'to' successor=[pdl::WorkDefinition]
	public WorkSequenceElements getWorkSequenceAccess() {
		return pWorkSequence;
	}
	
	public ParserRule getWorkSequenceRule() {
		return getWorkSequenceAccess().getRule();
	}
	
	//Guidance pdl::Guidance:
	//	'gd' text=STRING
	//	'to' element+=[pdl::WorkDefinition] (' ' element+=[pdl::WorkDefinition])*
	public GuidanceElements getGuidanceAccess() {
		return pGuidance;
	}
	
	public ParserRule getGuidanceRule() {
		return getGuidanceAccess().getRule();
	}
	
	//Ressource pdl::Ressource:
	//	're' name=ID quantity=INT
	public RessourceElements getRessourceAccess() {
		return pRessource;
	}
	
	public ParserRule getRessourceRule() {
		return getRessourceAccess().getRule();
	}
	
	//RessourceSequence pdl::RessourceSequence:
	//	'rs' workdefinition=[pdl::WorkDefinition]
	//	'needs' quantity=INT ressource=[pdl::Ressource]
	public RessourceSequenceElements getRessourceSequenceAccess() {
		return pRessourceSequence;
	}
	
	public ParserRule getRessourceSequenceRule() {
		return getRessourceSequenceAccess().getRule();
	}
	
	//enum WorkSequenceType returns pdl::WorkSequenceType:
	//	startToStart='s2s'
	//	| finishToStart='f2s'
	//	| startToFinish='s2f'
	//	| finishToFinish='f2f';
	public WorkSequenceTypeElements getWorkSequenceTypeAccess() {
		return eWorkSequenceType;
	}
	
	public EnumRule getWorkSequenceTypeRule() {
		return getWorkSequenceTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
