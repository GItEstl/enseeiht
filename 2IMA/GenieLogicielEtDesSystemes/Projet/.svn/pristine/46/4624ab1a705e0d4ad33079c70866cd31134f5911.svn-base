[comment encoding = UTF-8 /]
[module toJava('http://www.enseeiht.fr/gls/Game')]


[template public toJava(jeu : Jeu)]
[comment @main/]
[file (jeu.name.concat('.java'), false, 'UTF-8')]
import game.*;

public class MainJava {

	public static void main(String['[]'/] args) {
		/**
		 * Ici on met toutes les initialisations
		 * On a autant de ligne que dans le .game
		 */
		[jeu.initJeu()/]
		[jeu.initComposants()/]
		
		/**
		 * Maintenant on peut passer aux elements conditionnes
		 * On encapsule tout ce qui peut (meme si non necessaire)
		 */
		[jeu.getObjets()->initObjets()/]
		[jeu.getPossessionsConditionnees()->initPossessionsConditionnees()/]
		[jeu.getTransformations()->initTransformations()/]
		[jeu.getChoixConditionnes()->initChoixConditionnes()/]
		[jeu.getActionsConditionnees()->initActionsConditionnees()/]
		[jeu.getDecisions()->initDecisions()/]
		
		/**
		 * On peut desormais passer aux associations
		 * Celles-ci se font par l'intermediaire de methode type addElements pour les listes et setElement pour les attributs simples
		 */
		[jeu.fillJeu()/]
		[jeu.fillComposants()/]
		[jeu.fillDependencies()/]

		jeu.lancer();
	}

}
[/file]
[/template]

[template private initJeu(jeu : Jeu)]
[jeu.eClass().name/] [jeu.name.toLowerFirst()/] = new [jeu.eClass().name/]("[jeu.name/]");
[/template]

[template private initComposants(jeu : Jeu)]
[for (c : Composant | jeu.composants)]
[c.eClass().name/] [c.name.toLowerFirst()/] = new [c.eClass().name/]("[c.name/]");
[/for]
[/template]

[template private initObjets(objets : OrderedSet(Objet))]
[for (o : Objet | objets)]
[o.eClass().name/] [o.name().toLowerFirst()/] = new [o.eClass().name/]();
[/for]
[/template]

[template private initPossessionsConditionnees(possessionsConditionnees : OrderedSet(PossessionConditionnee))]
[for (pc : PossessionConditionnee | possessionsConditionnees)]
[pc.eClass().name/] [pc.name().toLowerFirst()/] = new [pc.eClass().name/]();
[/for]
[/template]

[template private initTransformations(transformations : OrderedSet(Transformation))]
[for (t : Transformation | transformations)]
[t.eClass().name/] [t.name().toLowerFirst()/] = new [t.eClass().name/]();
[/for]
[/template]

[template private initChoixConditionnes(choixConditionnes : OrderedSet(ChoixConditionne))]
[for (cc : ChoixConditionne | choixConditionnes)]
[cc.eClass().name/] [cc.name().toLowerFirst()/] = new [cc.eClass().name/]();
[/for]
[/template]

[template private initActionsConditionnees(actionsConditionnees : OrderedSet(ActionConditionnee))]
[for (ac : ActionConditionnee | actionsConditionnees)]
[ac.eClass().name/] [ac.name().toLowerFirst()/] = new [ac.eClass().name/]();
[/for]
[/template]

[template private initDecisions(decisions : OrderedSet(Decision))]
[for (d : Decision | decisions)]
[d.eClass().name/] [d.name().toLowerFirst()/] = new [d.eClass().name/]();
[/for]
[/template]

[template private fillJeu(jeu : Jeu)]
[let j : String = jeu.name.toLowerFirst()]
[j/].setTerritoire([jeu.territoire.name.toLowerFirst()/]);
[j/].setExplorateur([jeu.explorateur.name.toLowerFirst()/]);
[j/].setDifficulte(Difficulte.[jeu.difficulte/]);
[/let]
[/template]

[template private fillComposants(jeu : Jeu)]
[/template]

[template private fillDependencies(jeu : Jeu)]
[/template]

[query private getObjets(jeu : Jeu) : OrderedSet(Objet) = 
    Objet::allInstances()->asOrderedSet()
/]

[query private getPossessions(jeu : Jeu) : OrderedSet(Possession) = 
    Possession::allInstances()->asOrderedSet()
/]

[query private getPossessionsConditionnees(jeu : Jeu) : OrderedSet(PossessionConditionnee) = 
    PossessionConditionnee::allInstances()->asOrderedSet()
/]

[query private getTransformations(jeu : Jeu) : OrderedSet(Transformation) = 
    Transformation::allInstances()->asOrderedSet()
/]

[query private getChoixConditionnes(jeu : Jeu) : OrderedSet(ChoixConditionne) = 
    ChoixConditionne::allInstances()->asOrderedSet()
/]

[query private getActionsConditionnees(jeu : Jeu) : OrderedSet(ActionConditionnee) = 
    ActionConditionnee::allInstances()->asOrderedSet()
/]

[query private getDecisions(jeu : Jeu) : OrderedSet(Decision) = 
    Decision::allInstances()->asOrderedSet()
/]

[query private name(o : Objet) : String = 
    o.objet.name.concat(o.quantite.toString())
/]

[template private name(p : Possession)]
[if p.connaissance <> null][p.connaissance.name/][else][p.oclAsType(Objet).name()/][/if]
[/template]

[query private name(pc : PossessionConditionnee) : String = 
pc.possession.name().concat(pc.conditions->name()).concat(pc.eClass().name)
/]

[query private name(t : Transformation) : String = 
t.objets->name().concat(t.conditions->name()).concat(t.eClass().name)
/]

[template private name(cc : ChoixConditionne)]
[cc.choix.name/][if cc.conditions <> null][cc.conditions->name()/][/if][if cc.decisionsPrecedentes <> null][cc.decisionsPrecedentes->name()/][/if][cc.eClass().name/]
[/template]

[template private name(ac : ActionConditionnee)]
[ac.action.name/][if ac.conditions <> null][ac.conditions->name()/][/if][if ac.decisionsPrecedentes <> null][ac.decisionsPrecedentes->name()/][/if][ac.choixOfferts->name()/][ac.eClass().name/]
[/template]

[query private name(d : Decision) : String = 
d.choix.name.concat(d.action.name).concat(d.eClass().name)
/]

[template private name(objets : OrderedSet(Objet))]
[for (o : Objet | objets)]
[o.name().toUpperFirst()/][/for]
[/template]

[template private name(condition : Sequence(Condition))]
[for (c : Condition | condition)]
[c.name.toUpperFirst()/][/for]
[/template]

[template private name(choixConditionnes : OrderedSet(ChoixConditionne))]
[for (cc : ChoixConditionne | choixConditionnes)]
[cc.name().toUpperFirst()/][/for]
[/template]

[template private name(decisions : OrderedSet(Decision))]
[for (d : Decision | decisions)]
[d.name().toUpperFirst()/][/for]
[/template]